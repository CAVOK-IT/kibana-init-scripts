#!/bin/sh
#
# /etc/init.d/kibana -- startup script for Kibana
#
### BEGIN INIT INFO
# Provides:          kibana
# Required-Start:    $network $remote_fs $named
# Required-Stop:     $network $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts kibana
# Description:       Starts kibana using start-stop-daemon
### END INIT INFO

NAME="kibana"
VERSION="4.3"
DESC="Kibana $VERSION"

KB_BIN_DIR="/opt/$NAME/$VERSION/bin"
PID_DIR="/var/run/$NAME"
PID_FILE="$PID_DIR/$NAME-$VERSION.pid"
PATH="/bin:/usr/bin:/sbin:/usr/sbin:$KB_BIN_DIR"
DAEMON="$KB_BIN_DIR/kibana"
KB_USER=nobody
KB_GROUP=nogroup
CONFIG_FILE_PATH=""
LOG_DIR="/var/log/kibana"
KB_HOST=""
KB_PORT=""


DAEMON_OPTS="serve"
if [ -n "$CONFIG_FILE_PATH" ]; then
    DAEMON_OPTS="$DAEMON_OPTS --config $CONFIG_FILE_PATH"
fi
if [ -n "$LOG_DIR" ]; then
    # Ensure log dir exists
    if [ -n "$LOG_DIR" ] && [ ! -e "$LOG_DIR" ]; then
        mkdir -p "$LOG_DIR" && chown "$KB_USER":"$KB_GROUP" "$LOG_DIR"
    fi
    DAEMON_OPTS="$DAEMON_OPTS --log-file $LOG_DIR/kibana.log --quiet"
fi
if [ -n "$KB_HOST" ]; then
    DAEMON_OPTS="$DAEMON_OPTS --host $KB_HOST"
fi
if [ -n "$KB_PORT" ]; then
    DAEMON_OPTS="$DAEMON_OPTS --port $KB_PORT"
fi

# Define LSB functions.
. /lib/lsb/init-functions

if [ `id -u` -ne 0 ]; then
    log_daemon_msg "You need root privileges to run this script"
    exit 1
fi

if [ -r /etc/default/rcS ]; then
    . /etc/default/rcS
fi

case "$1" in
    start)
        log_daemon_msg "Starting $DESC"

        pid=`pidofproc -p $PID_FILE kibana`
        if [ -n "$pid" ] ; then
            log_daemon_msg "Already running."
            log_end_msg 0
            exit 0
        fi

        # Ensure that the PID_DIR exists (it is cleaned at OS startup time)
        if [ -n "$PID_DIR" ] && [ ! -e "$PID_DIR" ]; then
            mkdir -p "$PID_DIR" && chown "$KB_USER":"$KB_GROUP" "$PID_DIR"
        fi

        # Start Daemon
        start-stop-daemon --start -c "$KB_USER" --pidfile "$PID_FILE" --make-pidfile --background --exec "$DAEMON" -- "$DAEMON_OPTS"

        log_end_msg 0
        ;;
    stop)
        log_daemon_msg "Stopping $DESC"

        if [ -f "$PID_FILE" ]; then
            start-stop-daemon --stop --user "$KB_USER" --pidfile "$PID_FILE" --retry=TERM/20/KILL/5 >/dev/null
            if [ $? -eq 1 ]; then
                log_daemon_msg "$DESC is not running but pid file exists, cleaning up"
            elif [ $? -eq 3 ]; then
                PID="`cat $PID_FILE`"
                log_failure_msg "Failed to stop $DESC (pid $PID)"
                exit 1
            fi
            rm -f "$PID_FILE"
        else
                log_daemon_msg "(not running)"
        fi
        log_end_msg 0
        ;;
    status)
        status_of_proc "-p $PID_FILE" "$DAEMON" "$DESC" && exit 0 || exit $?
        ;;
    restart|force-reload)
        if [ -f "$PID_FILE" ]; then
                $0 stop
                sleep 1
        fi
        $0 start
        ;;
    *)
        log_daemon_msg "Usage: $0 {start|stop|restart|force-reload|status}"
        exit 1
        ;;
esac

exit 0
